{"version":3,"sources":["n1-main/m1-ui/header/Header.module.css","n1-main/m1-ui/common/super-input/SuperInput.module.css","n3-utils/u1-error/Error.module.css","n1-main/m1-ui/common/super-button/SuperButton.module.css","n1-main/m1-ui/common/super-checkbox/SuperCheckbox.module.css","n1-main/m1-ui/common/super-radio/SuperRadio.module.css","n1-main/m1-ui/Search/Search.module.css","n1-main/m1-ui/common/paginator/Paginator.module.css","n1-main/m1-ui/packs/Packs.module.css","n2-features/f1-auth/a1-login/Login.module.css","n1-main/m3-dal/api.ts","n1-main/m1-ui/app-reducer.tsx","n2-features/f1-auth/a1-login/auth-reducer.ts","n2-features/f1-auth/a1-login/Login.tsx","n2-features/f1-auth/a2-registration/register-reducer.ts","n2-features/f1-auth/a2-registration/Registration.tsx","n2-features/f1-auth/a3-recovery-password/recovery-reducer.ts","n2-features/f1-auth/a3-recovery-password/RecoveryPassword.tsx","n2-features/f1-auth/a4-enter-new-password/enterNewPassword-reducer.ts","n2-features/f1-auth/a4-enter-new-password/EnterNewPassword.tsx","n3-utils/u1-error/Error.tsx","n1-main/m1-ui/common/super-button/SuperButton.tsx","n1-main/m1-ui/common/super-input/SuperInput.tsx","n1-main/m1-ui/common/super-checkbox/SuperCheckbox.tsx","n1-main/m1-ui/common/super-radio/SuperRadio.tsx","n1-main/m1-ui/test-page/Tests.tsx","n1-main/m1-ui/profile/Profile.tsx","n1-main/m1-ui/packs/packs-reducer.ts","n1-main/m1-ui/packs/Pack/Pack.tsx","n1-main/m1-ui/Search/filter-reducer.ts","n1-main/m1-ui/Search/Search.tsx","n1-main/m1-ui/common/super-double-range/SuperDoubleRange.tsx","n1-main/m1-ui/common/paginator/Paginator.tsx","n1-main/m1-ui/common/preloader/Preloader.tsx","n1-main/m1-ui/packs/Packs.tsx","n1-main/m1-ui/cards/cards-reducer.ts","n1-main/m1-ui/cards/Card/Card.tsx","n1-main/m1-ui/cards/Cards.tsx","n1-main/m1-ui/routes/Routes.tsx","n1-main/m1-ui/header/Header.tsx","n1-main/m1-ui/App.tsx","reportWebVitals.ts","n1-main/m1-ui/profile/profile-reducer.ts","n1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","withCredentials","forgotMessage","API","email","password","rememberMe","post","then","response","data","delete","from","message","resetPasswordToken","defaultsQueryPacks","packName","min","max","sortPacks","page","pageCount","user_id","packsAPI","queryObj","query","Object","keys","forEach","key","push","get","join","cardsPack","defaultsQueryCards","cardsPack_id","cardAnswer","cardQuestion","sortPack","cardsAPI","card","initialState","status","isInitialized","setAppStatusAC","type","setIsInitializedAC","userData","_id","avatar","name","publicCardPacksCount","isLoggedIn","loginError","setIsLoggedIn","Login","dispatch","useDispatch","useSelector","state","auth","appStatus","app","useState","setEmail","setPassword","setRememberMe","to","PATH","PROFILE","onChange","event","currentTarget","value","checked","onClick","catch","e","error","loginTC","disabled","className","styles","Registration","isRegistration","register","LOGIN","style","registrationContainer","formBlock","placeholder","alert","console","log","registerTC","RecoveryPassword","restoredPassword","setRestoredPassword","forgot","isForgotPassword","ENTER_NEW_PASSWORD","isForgot","withRouter","props","newPassword","setNewPassword","correctNewPassword","setCorrectNewPassword","isNewPassword","passwordToken","setNewPasswordTC","match","params","token","Error","errorCat","item","SuperButton","red","text","restProps","finalClassName","s","default","SuperInput","onChangeText","onKeyPress","onEnter","spanClassName","finalSpanClassName","finalInputClassName","errorInputError","errorInput","superInput","SuperCheckbox","onChangeChecked","children","checkbox","SuperRadio","options","onChangeOption","onChangeCallback","mappedOptions","map","o","i","inputRadio","inputText","TestPage","Profile","updateCardsPackAC","id","deleteCardsPackAC","fetchPacksTC","packsData","Pack","pack","cardsCount","updated","deleteCardsPack","updateCardsPackName","CARDS","search","sortPackTC","Search","filter","searchValue","setSearchValue","searchDiv","setSearch","searchInput","SuperDoubleRange","Typography","gutterBottom","Slider","newValue","onChangeRange","valueLabelDisplay","aria-labelledby","Paginator","portionNumber","setPortionNumber","pagesPortionSize","leftBorder","setLeftBorder","rightBorder","setRightBorder","tempPages","generatePages","pages","setPages","pagesCount","Math","ceil","totalCount","portionSize","useEffect","pageDigit","currentPage","onPageClickHandler","v1","Preloader","Packs","packs","cardPacks","cardPacksTotalCount","minRedux","maxRedux","setMin","setMax","setPagesCount","pagesOptionsTags","onUpdateCardsPackNameHandler","onDeleteCardsPackHandler","paddingBottom","filtersWrapper","setSearchValueAC","values","setMinMaxValuesAC","range","getState","newPage","onPacksPageClickTC","onPortionPacksChangeTC","createCardsPackTC","p","fetchCardsTC","cardsData","Card","question","answer","grade","rating","cards","shots","answerImg","questionImg","questionVideo","answerVideo","createCardTC","c","REGISTRATION","RECOVERY_PASSWORD","TEST_PAGE","PACKS","Routes","path","render","Header","headerContainer","navBlock","activeClassName","active","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","reducer","combineReducers","profile","action","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,gBAAkB,gCAAgC,SAAW,yBAAyB,OAAS,yB,mBCAjHD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,WAAa,+BAA+B,MAAQ,4B,mBCAlHD,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,SAAW,wBAAwB,KAAO,sB,wCCAzFD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,IAAM,2B,mBCA/DD,EAAOC,QAAU,CAAC,SAAW,kC,mBCA7BD,EAAOC,QAAU,CAAC,WAAa,+BAA+B,UAAY,gC,mBCA1ED,EAAOC,QAAU,CAAC,YAAc,4BAA4B,UAAY,4B,mBCAxED,EAAOC,QAAU,CAAC,UAAY,6BAA6B,YAAc,+BAA+B,WAAa,8BAA8B,WAAa,gC,mBCAhKD,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,MAAQ,uB,mBCAzED,EAAOC,QAAU,CAAC,WAAa,4B,gMCCzBC,E,OAAWC,EAAMC,OAAO,CAE1BC,QAAS,sCACTC,iBAAiB,IAqDfC,EAAa,2KAGNC,EAAM,SACTC,EAAeC,EAAkBC,GACnC,OAAOT,EAASU,KAAwB,aAAc,CAACH,QAAOC,WAAUC,eACnEE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAH1BP,EAAM,SAKNC,EAAeC,GACpB,OAAOR,EAASU,KAA2B,gBAAiB,CAACH,QAAOC,aAC/DG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAP1BP,EAAM,WAUX,OAAON,EAASU,KAAwB,UAAW,IAC9CC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAX1BP,EAAM,WAkBX,OAAON,EAASc,OAAyC,WACpDH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAnB1BP,EAAM,SAqBAC,GAAkH,IAAnGQ,EAAkG,uDAAnF,iDAAkDC,EAAiC,uDAAfX,EAC7G,OAAOL,EAASU,KAAuC,cAAe,CAACH,QAAOQ,OAAMC,YAC/EL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAvB1BP,EAAM,SAyBAE,EAAkBS,GAC7B,OAAOjB,EAASU,KAAuC,wBAAyB,CAACF,WAAUS,uBACtFN,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAgCjCK,EAAqC,CACvCC,SAAU,GAAIC,IAAK,EAAGC,IAAK,EAAGC,UAAW,WAAYC,KAAM,EAAGC,UAAW,EAAGC,QAAS,IAwC5EC,EAAW,SACTC,GACP,IAAIC,EAAkB,GAQtB,OAPCC,OAAOC,KAAKZ,GAAiDa,SAAQ,SAACC,GAC/DL,EAASK,GACTJ,EAAMK,KAAN,UAAcD,EAAd,YAAqBL,EAASK,KAGlCJ,EAAMK,KAAN,UAAcD,EAAd,YAAqBd,EAAmBc,QAErChC,EAASkC,IAAT,qBAA6CN,EAAMO,KAAK,OAC1DxB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAX1Ba,EAAW,SAaTU,GACP,OAAOpC,EAASU,KAAT,aAAmD,CAAC0B,cACtDzB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAgDjCwB,EAAqC,CACvCC,aAAc,GACdC,WAAY,GACZC,aAAc,GACdC,SAAU,SACVrB,IAAK,EACLC,IAAK,EACLE,KAAM,EACNC,UAAW,GAkBFkB,EAAW,SACTf,GACP,IAAIC,EAAkB,GAQtB,OAPCC,OAAOC,KAAKO,GAAiDN,SAAQ,SAACC,GAC/DL,EAASK,GACTJ,EAAMK,KAAN,UAAcD,EAAd,YAAqBL,EAASK,KAGlCJ,EAAMK,KAAN,UAAcD,EAAd,YAAqBK,EAAmBL,QAErChC,EAASkC,IAAT,qBAA6CN,EAAMO,KAAK,OAC1DxB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAX1B6B,EAAW,SAaTC,GACP,OAAO3C,EAASU,KAAT,aAA4B,CAACiC,UCjQtCC,EAAe,CACjBC,OAAQ,OACRC,eAAe,GAsBNC,EAAiB,SAACF,GAAD,MACzB,CAACG,KAAM,qBAAsBH,WACrBI,EAAqB,SAACH,GAAD,MAC7B,CAACE,KAAM,yBAA0BF,kBCdhCF,EAAe,CACjBM,SAAU,CACN3C,MAAO,KACP4C,IAAK,KACLC,OAAQ,KACRC,KAAM,KACNC,qBAAsB,GAE1BC,YAAY,EACZC,WAAY,MAsBHC,EAAgB,SAACF,GAAD,MAA0B,CAACP,KAAM,wBAAyBO,e,wBCSxEG,EAnDS,WAEpB,IAAMC,EAAWC,cAEXL,EAAaM,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAKR,cACxEC,EAAaK,aAA6C,SAAAC,GAAK,OAAIA,EAAMC,KAAKP,cAC9EQ,EAAYH,aAAiD,SAAAC,GAAK,OAAIA,EAAMG,IAAIpB,UAEtF,EAA0BqB,mBAAS,IAAnC,mBAAO3D,EAAP,KAAc4D,EAAd,KACA,EAAgCD,mBAAS,IAAzC,mBAAO1D,EAAP,KAAiB4D,EAAjB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOzD,EAAP,KAAmB4D,EAAnB,KAiBA,OAAId,EACO,cAAC,IAAD,CAAUe,GAAIC,GAAKC,UAG1B,wCAEI,iCACI,8BACI,uBAAOxB,KAAK,OAAOyB,SAlBN,SAACC,GAC1BP,EAASO,EAAMC,cAAcC,YAmBrB,8BACI,uBAAO5B,KAAK,WAAWyB,SAlBP,SAACC,GAC7BN,EAAYM,EAAMC,cAAcC,YAmBxB,gCACI,uBAAO5B,KAAK,WAAWyB,SAlBL,SAACC,GAC/BL,EAAcK,EAAMC,cAAcE,YAgB1B,iBAIA,wBAAQ7B,KAAM,SAAU8B,QA/BH,WAC7BnB,EDgCe,SAACpD,EAAeC,EAAkBC,GAAlC,OAAwE,SAAAkD,GAC3FA,EAASZ,EAAe,YACxBzC,EAAUC,EAAOC,EAAUC,GACtBE,MAAK,SAAAC,GACF,IAAOL,EAAkDK,EAAlDL,MAAO4C,EAA2CvC,EAA3CuC,IAAKC,EAAsCxC,EAAtCwC,OAAQC,EAA8BzC,EAA9ByC,KAAMC,EAAwB1C,EAAxB0C,qBACjCK,EAVyC,CAACX,KAAM,qBAAsBnC,KAUhD,CAACN,QAAO4C,MAAKC,SAAQC,OAAMC,0BACjDK,EAASF,GAAc,IACvBE,EAASZ,EAAe,iBAE3BgC,OAAM,SAAAC,GACH,IAAMC,EAAQD,EAAEpE,SAAWoE,EAAEpE,SAASC,KAAKoE,MAASD,EAAEhE,QAAU,gCAChE2C,EAd0C,CAACX,KAAM,uBAAwBQ,WAclDyB,IACvBtB,EAASZ,EAAe,eC5CnBmC,CAAQ3E,EAAOC,EAAUC,KA8BiC0E,SAAwB,YAAdnB,EAArE,uBAEHR,EAAa,qBAAK4B,UAAWC,IAAO7B,WAAvB,SAAoCA,IAAoB,OC7C5EZ,EAAe,G,iBCsDN0C,EAvDgB,WAE3B,MAA0BpB,mBAAiB,IAA3C,mBAAO3D,EAAP,KAAc4D,EAAd,KACA,EAAgCD,mBAAiB,IAAjD,mBAAO1D,EAAP,KAAiB4D,EAAjB,KAEMJ,EAAYH,aAAiD,SAAAC,GAAK,OAAIA,EAAMG,IAAIpB,UAChF0C,EAAiB1B,aAAuC,SAAAC,GAAK,OAAIA,EAAM0B,SAASD,kBAChF5B,EAAWC,cAoBjB,OAAI2B,EACO,cAAC,IAAD,CAAUjB,GAAIC,GAAKkB,QAI1B,sBAAKL,UAAWM,IAAMC,sBAAtB,UACI,gDACA,uBAAMP,UAAWM,IAAME,UAAvB,UACI,gCACI,2CAAoB,uBAAOC,YAAY,iBAAiB7C,KAAK,QAAQ4B,MAAOrE,EACjDkE,SA5Bd,SAACO,GAC1Bb,EAASa,EAAEL,cAAcC,aA6BjB,gCACI,8CAAuB,uBAAOiB,YAAY,oBAAoB7C,KAAK,WAAW4B,MAAOpE,EACvDiE,SA5Bd,SAACO,GAC7BZ,EAAYY,EAAEL,cAAcC,aA6BpB,8BACI,wBAAQ5B,KAAK,SAAS8B,QA3BR,WACT,KAAbtE,GAA6B,KAAVD,EACnBuF,MAAM,sBAENnC,EDDc,SAACpD,EAAeC,GAAhB,OAAmD,SAAAmD,GACzEA,EAASZ,EAAe,YACxBzC,EAAaC,EAAOC,GACfG,MAAK,WACFgD,EANP,CAACX,KAAM,oCAAqCuC,gBAMJ,IACjC5B,EAASZ,EAAe,iBAE3BgC,OAAM,SAAAnE,GACHmF,QAAQC,IAAIpF,EAASqE,OACrBtB,EAASZ,EAAe,eCRfkD,CAAW1F,EAAOC,IAC3B2D,EAAS,IACTC,EAAY,MAqBkDe,SAAwB,YAAdnB,EAAhE,2BAIR,8BACI,cAAC,IAAD,CAASM,GAAIC,GAAKkB,MAAlB,yBChDV7C,EAAe,GC+BNsD,EAlCoB,WAE/B,MAAgDhC,mBAAiB,IAAjE,mBAAOiC,EAAP,KAAyBC,EAAzB,KACMzC,EAAWC,cAWjB,OAVyBC,aAAuC,SAAAC,GAAK,OAAIA,EAAMuC,OAAOC,oBAW3E,cAAC,IAAD,CAAUhC,GAAIC,GAAKgC,qBAI1B,gCACI,iCACI,2CAAoB,uBAAOV,YAAY,iBAAiB7C,KAAK,QAAQ4B,MAAOuB,EACjD1B,SAhBC,SAACO,GACrCoB,EAAoBpB,EAAEL,cAAcC,UAgB5B,8BACI,wBAAQ5B,KAAK,SAAS8B,QAdJ,WDYN,IAACvE,ECXzBoD,GDWyBpD,ECXC4F,EDW+B,SAAAxC,GAC7DA,EAASZ,EAAe,YACxBzC,EAAmBC,GACdI,MAAK,WACFgD,EANP,CAACX,KAAM,kCAAmCwD,UAMJ,IAC/B7C,EAASZ,EAAe,iBAE3BgC,OAAM,SAAAnE,GACHmF,QAAQC,IAAIpF,EAASqE,OACrBtB,EAASZ,EAAe,kBCPhB,uBAGR,8BACI,cAAC,IAAD,CAASuB,GAAIC,GAAKkB,MAAlB,yBCzBV7C,EAAe,GCkDN6D,eAhD+B,SAACC,GAE3C,MAAsCxC,mBAAiB,IAAvD,mBAAOyC,EAAP,KAAoBC,EAApB,KACA,EAAoD1C,mBAAiB,IAArE,mBAAO2C,EAAP,KAA2BC,EAA3B,KAEMnD,EAAWC,cAmBjB,OAlBsBC,aAAuC,SAAAC,GAAK,OAAIA,EAAM6C,YAAYI,iBAmB7E,cAAC,IAAD,CAAUzC,GAAIC,GAAKkB,QAK1B,gCACI,iCACI,uBAAOzC,KAAK,WAAW4B,MAAO+B,EACvBlC,SAzBgB,SAACO,GAChC4B,EAAe5B,EAAEL,cAAcC,UAyBvB,uBAAO5B,KAAK,WAAW4B,MAAOiC,EACvBpC,SAvBuB,SAACO,GACvC8B,EAAsB9B,EAAEL,cAAcC,UAuB9B,8BACI,wBAAQ5B,KAAK,SAAS8B,QArBN,WACxB6B,IAAgBE,EAChBlD,EDDoB,SAACgD,EAAqBK,GAAtB,OAA8D,SAAArD,GAC1FA,EAASZ,EAAe,YACxBzC,EAAmBqG,EAAaK,GAC3BrG,MAAK,WACFgD,EAASZ,EAAe,cACxBY,EAPP,CAACX,KAAM,yCAA0C+D,eAOd,OAE/BhC,OAAM,SAAAnE,GACHmF,QAAQC,IAAIpF,EAASqE,OACrBtB,EAASZ,EAAe,eCRfkE,CAAiBN,EAAaD,EAAMQ,MAAMC,OAAOC,QAE1DtB,MAAM,0BAiBE,uBAGR,8BACI,cAAC,IAAD,CAASxB,GAAIC,GAAKkB,MAAlB,2B,iBCjCD4B,EAfS,WACpB,OACI,sBAAKjC,UAAWM,IAAMT,MAAtB,UACI,4CACA,gEACA,qBAAKG,UAAWM,IAAM4B,SAAtB,8DACA,8BACI,qBAAKlC,UAAWM,IAAM6B,KAAtB,SACI,cAAC,IAAD,CAASjD,GAAIC,GAAKC,QAAlB,6B,yBCeLgD,EAlBqC,SAAC,GAK/C,IAHEC,EAGH,EAHGA,IAAIC,EAGP,EAHOA,KAAMtC,EAGb,EAHaA,UACPuC,EAEN,0CAEKC,EAAc,UAAMH,EAAMI,IAAEJ,IAAMI,IAAEC,QAAtB,YAAiC1C,GAErD,OACI,gDACIA,UAAWwC,GACPD,GAFR,aAGED,M,kBCmCKK,GA7CuC,SAAC,GAUlD,EARG/E,KAQF,IAPEyB,EAOH,EAPGA,SAAUuD,EAOb,EAPaA,aACVC,EAMH,EANGA,WAAYC,EAMf,EANeA,QACZjD,EAKH,EALGA,MACWkD,GAId,EAJG/C,UAIH,EAJc+C,eAERR,EAEN,6GAgBKS,EAAkB,UAAMP,KAAE5C,MAAR,YAAiBkD,GAAgC,IAEnEE,EAAmB,UAAMR,KAAES,gBAAR,YAA2BrD,EAAQ4C,KAAEU,WAAaV,KAAEW,WAApD,KAEzB,OACI,qCACI,mCACIxF,KAAM,OACNyB,SAvBa,SAACO,GACtBP,GACGA,EAASO,GAEZgD,GAAgBA,EAAahD,EAAEL,cAAcC,QAoBrCqD,WAlBe,SAACjD,GACxBiD,GAAcA,EAAWjD,GAEf,UAAVA,EAAEhD,KACCkG,GACAA,KAcK9C,UAAWiD,GAEPV,IAEP1C,GAAS,sBAAMG,UAAWgD,EAAjB,SAAsCnD,Q,oBCV7CwD,GAjCyC,SAAC,GASpD,EAPGzF,KAOF,IANEyB,EAMH,EANGA,SAAUiE,EAMb,EANaA,gBACVtD,EAKH,EALGA,UACAuD,GAIH,EALcR,cAKd,EAJGQ,UAEGhB,EAEN,4FAQKU,EAAmB,UAAMR,KAAEe,SAAR,YAAoBxD,GAAwB,IAErE,OACI,kCACI,mCACIpC,KAAM,WACNyB,SAba,SAACO,GACtBP,GACGA,EAASO,GAEZ0D,GAAmBA,EAAgB1D,EAAEL,cAAcE,UAU3CO,UAAWiD,GAEPV,IAEPgB,GAAY,sBAAMvD,UAAWyC,KAAEM,cAAnB,SAAmCQ,Q,oBCI7CE,GAhCmC,SAAC,GAO9C,EALG7F,KAKF,IALQK,EAKT,EALSA,KACNyF,EAIH,EAJGA,QACUC,GAGb,EAJYnE,MAIZ,EAHGH,SAGH,EAHasE,gBACPpB,EAEN,6EACKqB,EAAmB,SAAChE,GACtB+D,GAAkBA,EAAe/D,EAAEL,cAAcC,QAI/CqE,EAAuBH,EAAUA,EAAQI,KAAI,SAACC,EAAGC,GAAJ,OAC/C,wBAA4BhE,UAAWyC,KAAEwB,WAAzC,UACI,mCACIrG,KAAM,QACNyB,SAAUuE,EACV3F,KAAMA,GACFsE,IAER,sBAAMvC,UAAWyC,KAAEyB,UAAnB,SAA+BH,MAPvB9F,EAAO,IAAM+F,MASxB,GAEL,OACI,mCACKH,KCpBEM,GAXY,WACvB,OACI,gCACI,cAAC,EAAD,CAAa7B,KAAM,MACnB,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,QCqBG8B,GAxBW,WAEtB,IAAM7F,EAAWC,cACXL,EAAaM,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAKR,cACxES,EAAYH,aAAiD,SAAAC,GAAK,OAAIA,EAAMG,IAAIpB,UAMtF,OAAKU,EAMD,0CAEI,uBACA,wBAAQuB,QAbQ,WACpBnB,GduDoC,SAAAA,GACxCA,EAASZ,EAAe,YACxBzC,IACKK,MAAK,SAAAC,GACF+C,EAASF,GAAc,IACvBE,EAASZ,EAAe,iBAE3BgC,OAAM,SAAAE,GACHtB,EAASZ,EAAe,kBcnDUoC,SAAwB,YAAdnB,EAA5C,wBARG,cAAC,IAAD,CAAUM,GAAIC,GAAKkB,SCT5B7C,GAAe,GA0CR6G,GAAoB,SAACC,EAAYrG,GAAb,MAC5B,CAACL,KAAM,0BAA2B0G,KAAIrG,SAE9BsG,GAAoB,SAACD,GAAD,MAC5B,CAAC1G,KAAM,0BAA2B0G,OAK1BE,GAAe,SAACjI,GAAD,OAAsD,SAAAgC,GAC9EA,EAASZ,EAAe,YACxBrB,EAAoBC,GAAY,IAC3BhB,MAAK,SAAAC,GACFmF,QAAQC,IAAIpF,GACZ+C,EAnBP,CAACX,KAAM,kBAAmB6G,UAmBKjJ,IACxB+C,EAASZ,EAAe,iBAE3BgC,OAAM,SAAAE,GACHc,QAAQC,IAAIf,GACZtB,EAASV,GAAmB,IAC5BU,EAASZ,EAAe,gBC9DvB+G,GAAgC,SAACpD,GAG1C,OACI,mCACI,+BACI,6BAAKA,EAAMqD,KAAK1G,OAChB,6BAAKqD,EAAMqD,KAAKC,aAChB,6BAAKtD,EAAMqD,KAAKE,UAChB,6BAAKvD,EAAMqD,KAAK/G,OAChB,+BACI,wBAAQ8B,QAAS,kBAAM4B,EAAMwD,gBAAgBxD,EAAMqD,KAAK5G,MAAxD,iBACA,wBAAQ2B,QAAS,kBAAM4B,EAAMyD,oBAAoBzD,EAAMqD,KAAK5G,MAA5D,oBACA,cAAC,IAAD,CAASmB,GAAE,UAAKC,GAAK6F,MAAV,YAAmB1D,EAAMqD,KAAK5G,KAAzC,4BClBdP,GAAe,CACjByH,OAAQ,GACRjJ,IAAK,EACLC,IAAK,GA6CIiJ,GAAa,SAAChJ,GAAD,OAAqC,SAACqC,GAC5DA,EAASiG,GAAa,CAACtI,iB,oBCTZiJ,GApC2B,SAAC7D,GAMvC,IAAM2D,EAASxG,aAAsC,SAAAC,GAAK,OAAIA,EAAM0G,OAAOH,UAE3E,EAAsCnG,mBAASmG,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAAkCxG,qBAAlC,6BAgBA,OACI,qBAAKkB,UAAWC,KAAOsF,UAAvB,SACI,uBAAO3H,KAAK,OACL6C,YAAa,YACbpB,SAlBQ,SAACC,GACpB,IAAIE,EAAQF,EAAMC,cAAcC,MAChC8F,EAAe9F,GACf8B,EAAMkE,UAAUhG,IAgBLA,MAAO6F,EACPrF,UAAWC,KAAOwF,iB,oBCVtBC,GArB+C,SAACpE,GAM3D,OACI,sBAAKtB,UAAWsB,EAAMtB,UAAYsB,EAAMtB,UAAY,GAApD,UACI,cAAC2F,GAAA,EAAD,CAAYrB,GAAG,gBAAgBsB,cAAY,IAE3C,cAACC,GAAA,EAAD,CACIrG,MAAO8B,EAAM9B,MACbH,SAVS,SAACC,EAAwBwG,GAC1CxE,EAAMyE,cAAc,CAACD,EAAS,GAAIA,EAAS,MAUnCE,kBAAkB,KAClBC,kBAAgB,sB,8BC6CjBC,GAvDiC,SAAC5E,GAE7C,MAA0CxC,mBAAiB,GAA3D,mBAAOqH,EAAP,KAAsBC,EAAtB,KACA,EAAoCtH,oBAAkBqH,EAAgB,GAAK7E,EAAM+E,iBAAmB,GAApG,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAsCzH,mBAAiBqH,EAAgB7E,EAAM+E,kBAA7E,mBAAOG,EAAP,KAAoBC,EAApB,KAQA,EAA0B3H,mBAPJ,WAElB,IADA,IAAI4H,EAAY,GACP1C,EAAIsC,EAAYtC,GAAKwC,EAAaxC,IACvC0C,EAAU7J,KAAKmH,GAEnB,OAAO0C,EAEuCC,IAAlD,mBAAOC,EAAP,KAAcC,EAAd,KAEMC,EAAaC,KAAKC,KAAK1F,EAAM2F,WAAa3F,EAAM4F,aAGtDC,qBAAU,WAEN,IADA,IAAIT,EAAY,GACP1C,EAAIsC,EAAYtC,GAAKwC,EAAaxC,IACvC0C,EAAU7J,KAAKmH,GAEnB6C,EAASH,KACV,CAACJ,EAAYE,IAehB,OACI,sBAAKxG,UAAWsB,EAAMtB,UAAtB,UACoB,IAAfsG,EACK,cAAC,EAAD,CAAahE,KAAM,OAAQ5C,QARf,WACtB6G,EAAcD,EAAa,IAC3BG,EAAeD,EAAc,OAOnB,GACLI,EAAM9C,KAAI,SAAA3H,GAAI,OAAI,sBACM6D,UAAS,UAAKC,KAAOmH,UAAZ,YAAyBjL,IAASmF,EAAM+F,YAC3CpH,KAAOoH,YACP,IACN3H,QAAS,kBAtBf,SAACvD,GACxBiK,EAAiBjK,GACjBmF,EAAMgG,mBAAmBnL,GAoBmBmL,CAAmBnL,IAJxC,SAIgDA,GAJrCoL,mBAK7Bf,IAAgBM,EACX,cAAC,EAAD,CAAaxE,KAAM,OAAQ5C,QApBf,WACtB6G,EAAcD,EAAa,IAC3BG,EAAeD,EAAc,OAmBnB,O,oBC9DLgB,GAAsB,WAC/B,OACI,8BACI,iDCqBCC,GAAkB,WAE3B,IAAMC,EAAQjJ,aAA+C,SAAAC,GAAK,OAAIA,EAAMgJ,MAAMC,aAC5EC,EAAsBnJ,aAAsC,SAAAC,GAAK,OAAIA,EAAMgJ,MAAME,uBACjFzL,EAAOsC,aAAsC,SAAAC,GAAK,OAAIA,EAAMgJ,MAAMvL,QAClEC,EAAYqC,aAAsC,SAAAC,GAAK,OAAIA,EAAMgJ,MAAMtL,aAEvEmC,EAAWC,cAEXqJ,EAAWpJ,aAAsC,SAAAC,GAAK,OAAIA,EAAM0G,OAAOpJ,OACvE8L,EAAWrJ,aAAsC,SAAAC,GAAK,OAAIA,EAAM0G,OAAOnJ,OAG7E,EAAsB6C,mBAAiB+I,GAAvC,mBAAO7L,EAAP,KAAY+L,EAAZ,KACA,EAAsBjJ,mBAAiBgJ,GAAvC,mBAAO7L,EAAP,KAAY+L,EAAZ,KACA,EAAoClJ,mBAAiB1C,GAArD,mBAAO0K,EAAP,KAAmBmB,EAAnB,KAkBAd,qBAAU,WACN5I,EAASiG,QACV,IAEH,IACM0D,EADe,CAAC,EAAG,GAAI,GAAI,GAAI,IACCpE,KAAI,SAAA3B,GAAI,OAAI,wBAAQ3C,MAAO2C,EAAf,SAAiCA,GAAPA,MAStEgG,EAA+B,SAAC7D,GAGlC/F,EAAS8F,GAAkBC,EAFd,0BAKX8D,EAA2B,SAAC9D,GAE9B/F,EAASgG,GAAkBD,KAG/B,OAAKoD,EAKD,qCACI,oBAAIpH,MAAO,CAAC+H,cAAe,QAA3B,wBACA,sBAAKrI,UAAWC,KAAOqI,eAAvB,UACI,cAAC,GAAD,CAAQ9C,UAAW,SAAChG,GAChBjB,ELhEY,SAACiB,GAAD,MAAoB,CAAC5B,KAAM,mBAAoB4B,SKgElD+I,CAAiB/I,OAE9B,gCACI,cAAC,GAAD,CAAkBuG,cArDL,SAACyC,GAC1BT,EAAOS,EAAO,IACdR,EAAOQ,EAAO,IACdjK,ELhByB,SAACiK,GAAD,MAAuB,CAAC5K,KAAM,qBAAsB4K,UKgBpEC,CAAkBD,KAmDGhJ,MAAO,CAACxD,EAAKC,GACb+D,UAAWC,KAAOyI,QACpC,8DAEJ,cAAC,EAAD,CAAapG,KAAM,SACN5C,QAAS,kBAAMnB,GLnEW,SAACA,EAAUoK,GAC9D,IAAI1D,EAAS0D,IAAWvD,OAAOH,OAC3BjJ,EAAM2M,IAAWvD,OAAOpJ,IACxBC,EAAM0M,IAAWvD,OAAOnJ,IAE5BsC,EAASiG,GADY,CAACzI,SAAUkJ,EAAQjJ,IAAKA,EAAKC,IAAKA,cKiE/C,gCACI,cAAC,GAAD,CAAWgL,WAAYW,EACZP,YAAalL,EACb+K,YAAa9K,EACbiK,iBAAkB,GAClBiB,mBA5DI,SAACsB,GACxBrK,ELP0B,SAACqK,GAAD,OAAmC,SAACrK,GAClEA,EFM8C,CAACX,KAAM,yBAA0B4B,MENvDoJ,IAExBrK,EAASiG,GADM,CAACrI,KAAMyM,MKKTC,CAAmBD,OA4DpB,wBAAQ3K,KAAK,mBACLqG,GAAG,mBACH9E,MAAOsH,EACPzH,SA5Dc,SAACC,GAC/B2I,GAAe3I,EAAMC,cAAcC,OACnCjB,ELN8B,SAACuI,GAAD,OAAsC,SAACvI,GACzEA,EFC+C,CAACX,KAAM,0BAA2B4B,MEDxDsH,IACzBvI,EAASiG,GAAa,CAACpI,UAAW0K,MKIrBgC,EAAwBxJ,EAAMC,cAAcC,SAuD7C,SAIK0I,OAGT,kCACI,gCACA,+BACI,sCACA,6CACI,wBAAQxI,QAAS,kBAAMnB,EAAS2G,GAAW,iBAA3C,oBACA,wBAAQxF,QAAS,kBAAMnB,EAAS2G,GAAW,iBAA3C,uBAEJ,wCACA,qCACA,6BACI,wBAAQxF,QA9DE,WAI1BnB,EPOyB,SAACvB,GAAD,OAA2D,SAAAuB,GACxFA,EAASZ,EAAe,YACxBrB,EAAoBU,GACfzB,MAAK,SAAAC,GACF+C,EAASiG,MAETjG,EAASZ,EAAe,iBAE3BgC,OAAM,SAAAE,GACHc,QAAQC,IAAIf,GACZtB,EAASV,GAAmB,IAC5BU,EAASZ,EAAe,eOlBnBoL,CAHO,CACZ9K,KAAM,qBA4DM,wBAIR,gCACCyJ,GAASA,EAAM5D,KAAI,SAAAkF,GAChB,OAAO,cAAC,GAAD,CACMrE,KAAMqE,EACNlE,gBAAiBsD,EACjBrD,oBAAqBoD,GAHhBa,EAAEjL,gBAjDzB,cAAC,GAAD,KC/ETP,GAAe,GAkBRyL,GAAe,SAAC3E,GAAD,OAA8B,SAAA/F,GACtDA,EAASZ,EAAe,YACxBL,EAAoB,CAACJ,aAAcoH,IAC9B/I,MAAK,SAAAC,GACF+C,EANP,CAACX,KAAM,kBAAmBsL,UAMK1N,IACxB+C,EAASZ,EAAe,iBAE3BgC,OAAM,SAAAE,GACHc,QAAQC,IAAIf,GACZtB,EAASV,GAAmB,IAC5BU,EAASZ,EAAe,gBC3BvBwL,GAAgC,SAAC7H,GAC1C,OACI,mCACI,+BACI,6BAAKA,EAAM/D,KAAK6L,WAChB,6BAAK9H,EAAM/D,KAAK8L,SAChB,6BAAK/H,EAAM/D,KAAK+L,QAChB,6BAAKhI,EAAM/D,KAAKsH,UAChB,6BAAKvD,EAAM/D,KAAKgM,eCwCjBlI,gBA1CoB,SAACC,GAEhC,IAAMkI,EAAQ/K,aAA+C,SAAAC,GAAK,OAAIA,EAAM8K,MAAMA,SAC5EjL,EAAWC,cAEjB2I,qBAAU,WACN5I,EAAS0K,GAAa3H,EAAMQ,MAAMC,OAAO7E,iBAC1C,IAUH,OACI,qCACI,4CACA,kCACI,gCACA,+BACI,0CACA,wCACA,uCACA,wCACA,qCACA,6BACI,wBAAQwC,QApBH,WACrB,IAAMnC,EAAO,CACTL,aAAcoE,EAAMQ,MAAMC,OAAO7E,aAAckM,SAAU,GAAIC,OAAQ,GAAIC,MAAO,EAChFG,MAAO,EAAGF,OAAQ,EAAGG,UAAW,GAAIC,YAAa,GAAIC,cAAe,GAAIC,YAAa,GAAIjM,KAAM,IAEnGW,EFWoB,SAAChB,GAAD,OAAwC,SAAAgB,GAChEA,EAASZ,EAAe,YACxBL,EAAoBC,GACfhC,MAAK,SAAAC,GACF+C,EAAS0K,GAAazN,EAASC,KAAK8B,KAAKQ,MACzCQ,EAASZ,EAAe,iBAE3BgC,OAAM,SAAAE,GACHc,QAAQC,IAAIf,GACZtB,EAASV,GAAmB,IAC5BU,EAASZ,EAAe,eErBnBmM,CAAavM,KAeN,wBAIR,gCACCiM,GAASA,EAAM1F,KAAI,SAAAiG,GAChB,OAAO,cAAC,GAAD,CAAkBxM,KAAMwM,GAAbA,EAAEhM,mBCpC3BoB,GAAO,CAChBC,QAAS,WACTiB,MAAO,SACP2J,aAAc,gBACdC,kBAAmB,qBACnB9I,mBAAoB,sBACpB+I,UAAW,aACXC,MAAO,SACPnF,MAAO,UAqBIoF,GAlBU,WACrB,OACI,8BACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,KAAMlL,GAAKC,QAASkL,OAAQ,kBAAM,cAAC,GAAD,OACzC,cAAC,IAAD,CAAOD,KAAMlL,GAAKkB,MAAOiK,OAAQ,kBAAM,cAAC,EAAD,OACvC,cAAC,IAAD,CAAOD,KAAMlL,GAAK6K,aAAcM,OAAQ,kBAAM,cAAC,EAAD,OAC9C,cAAC,IAAD,CAAOD,KAAMlL,GAAK8K,kBAAmBK,OAAQ,kBAAM,cAAC,EAAD,OACnD,cAAC,IAAD,CAAOD,KAAMlL,GAAKgC,mBAAoBmJ,OAAQ,kBAAM,cAAC,EAAD,OACpD,cAAC,IAAD,CAAOD,KAAMlL,GAAKgL,MAAOG,OAAQ,kBAAM,cAAC,GAAD,OACvC,cAAC,IAAD,CAAOD,KAAI,UAAKlL,GAAK6F,MAAV,mBAAkCsF,OAAQ,kBAAM,cAAC,GAAD,OAC3D,cAAC,IAAD,CAAOD,KAAMlL,GAAK+K,UAAWI,OAAQ,kBAAM,cAAC,GAAD,OAC3C,cAAC,IAAD,CAAOA,OAAQ,kBAAM,cAAC,EAAD,aCgBtBC,GA5CU,WAErB,IAAMpM,EAAaM,aAAuC,SAAAC,GAAK,OAAIA,EAAMC,KAAKR,cAE9E,OACI,qBAAK6B,UAAWM,IAAMkK,gBAAtB,SACI,qBAAKxK,UAAWM,IAAMmK,SAAtB,SACMtM,EAoBI,qCACE,8BACI,cAAC,IAAD,CAASe,GAAIC,GAAKC,QAASsL,gBAAiBpK,IAAMqK,OAAlD,uBAEJ,8BACI,cAAC,IAAD,CAASzL,GAAIC,GAAKgL,MAAOO,gBAAiBpK,IAAMqK,OAAhD,qBAEJ,8BACI,cAAC,IAAD,CAASzL,GAAIC,GAAK6F,MAAO0F,gBAAiBpK,IAAMqK,OAAhD,wBA3BR,qCACI,8BACI,cAAC,IAAD,CAASzL,GAAIC,GAAKkB,MAAOqK,gBAAiBpK,IAAMqK,OAAhD,qBAEJ,8BACI,cAAC,IAAD,CAASzL,GAAIC,GAAK6K,aAAcU,gBAAiBpK,IAAMqK,OAAvD,4BAEJ,8BACI,cAAC,IAAD,CAASzL,GAAIC,GAAK8K,kBAAmBS,gBAAiBpK,IAAMqK,OAA5D,iCAGJ,8BACI,cAAC,IAAD,CAASzL,GAAIC,GAAKgC,mBAAoBuJ,gBAAiBpK,IAAMqK,OAA7D,kCAGJ,8BACI,cAAC,IAAD,CAASzL,GAAIC,GAAK+K,UAAWQ,gBAAiBpK,IAAMqK,OAApD,iCCCbC,GAvBO,WAElB,IAAMlN,EAAgBe,aAAuC,SAAAC,GAAK,OAAIA,EAAMG,IAAInB,iBAC1EkB,EAAYH,aAAiD,SAAAC,GAAK,OAAIA,EAAMG,IAAIpB,UAChFc,EAAWC,cAMjB,OAJA2I,qBAAU,WACN5I,G7BoB4C,SAAAA,GAChDA,EAASZ,EAAe,YACxBzC,IACKK,MAAK,WACFgD,EAASZ,EAAe,cACxBY,EAASV,GAAmB,OAE/B8B,OAAM,SAAAE,GACHc,QAAQC,IAAIf,GACZtB,EAASV,GAAmB,IAC5BU,EAASZ,EAAe,mB6B7B7B,IAEED,EAKD,sBAAKsC,UAAU,MAAf,UACI,cAAC,GAAD,IACe,YAAdpB,GAA2B,cAAC,GAAD,IAC5B,cAAC,GAAD,OAPG,cAAC,GAAD,KCNAiM,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBxP,MAAK,YAAkD,IAA/CyP,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCFRtN,GAAe,G,SCWf6N,GAAUC,aAAgB,CAC5BC,QDR0B,WAAoF,IAAnF7M,EAAkF,uDAAxDlB,GAAcgO,EAA0C,uCAGrG,OAFAA,EAAO5N,KAEAc,GCMfC,K/BauB,WAA8F,IAA7FD,EAA4F,uDAAlElB,EAAcgO,EAAoD,uCACpH,OAAQA,EAAO5N,MACX,IAAK,qBACD,OAAO,2BAAIc,GAAU8M,EAAO/P,MAEhC,IAAK,wBACD,OAAO,2BAAIiD,GAAX,IAAkBP,WAAYqN,EAAOrN,aAEzC,IAAK,uBACD,OAAO,2BAAIO,GAAX,IAAkBN,WAAYoN,EAAOpN,aAEzC,QACI,OAAOM,I+BxBf0B,S7BP2B,WAAkG,IAAjG1B,EAAgG,uDAAtElB,EAAcgO,EAAwD,uCAC5H,OAAQA,EAAO5N,MACX,IAAK,oCACD,OAAO,2BACAc,GADP,IAEIyB,eAAgBqL,EAAOrL,iBAE/B,QACI,OAAOzB,I6BAfuC,O3BR2B,WAAkG,IAAjGvC,EAAgG,uDAAtElB,EAAcgO,EAAwD,uCAC5H,OAAQA,EAAO5N,MACX,IAAK,kCACD,OAAO,2BACAc,GADP,IAEIwC,iBAAkBsK,EAAOpK,WAEjC,QACI,OAAO1C,I2BCfG,IhCTsB,WAA6F,IAA5FH,EAA2F,uDAAjElB,EAAcgO,EAAmD,uCAClH,OAAQA,EAAO5N,MACX,IAAK,qBACD,OAAO,2BACAc,GADP,IAEIjB,OAAQ+N,EAAO/N,SAEvB,IAAK,yBACD,OAAO,2BACAiB,GADP,IAEIhB,cAAe8N,EAAO9N,gBAE9B,QACI,OAAOgB,IgCHf0G,OdVyB,WAAoF,IAAnF1G,EAAkF,uDAAxDlB,GAAcgO,EAA0C,uCAC5G,OAAQA,EAAO5N,MACX,IAAK,mBACD,OAAO,2BAAIc,GAAX,IAAkBuG,OAAQuG,EAAOhM,QAErC,IAAK,qBACD,OAAO,2BAAId,GAAX,IAAkB1C,IAAKwP,EAAOhD,OAAO,GAAIvM,IAAKuP,EAAOhD,OAAO,KAEhE,QACI,OAAO9J,IcEf6C,YzBXmC,WAAwF,IAAvF7C,EAAsF,uDAA5DlB,EAAcgO,EAA8C,uCAC1H,OAAQA,EAAO5N,MACX,IAAK,yCACD,OAAO,2BACAc,GADP,IAEIiD,cAAe6J,EAAO7J,gBAE9B,QACI,OAAOjD,IyBIfgJ,MhBZwB,WAA+F,IAA9FhJ,EAA6F,uDAAnElB,GAAcgO,EAAqD,uCACtH,OAAQA,EAAO5N,MACX,IAAK,kBACD,OAAO,2BACAc,GAAU8M,EAAO/G,WAE5B,IAAK,yBACD,OAAO,2BAAI/F,GAAX,IAAkBvC,KAAMqP,EAAOhM,QAEnC,IAAK,0BACD,OAAO,2BAAId,GAAX,IAAkBtC,UAAWoP,EAAOhM,QAExC,IAAK,0BACD,OAAO,2BACAd,GADP,IAEIiJ,UAAWjJ,EAAMiJ,UAAU7D,KAAI,SAAAkF,GAAC,OAAIA,EAAEjL,MAAQyN,EAAOlH,GAAjB,2BAA0B0E,GAA1B,IAA6B/K,KAAMuN,EAAOvN,OAAQ+K,OAE9F,IAAK,0BACD,OAAO,2BACAtK,GADP,IAEIiJ,UAAWjJ,EAAMiJ,UAAUvC,QAAO,SAAA4D,GAAC,OAAIA,EAAEjL,MAAQyN,EAAOlH,QAQhE,QACI,OAAO5F,IgBhBf8K,MRjBwB,WAA+F,IAA9F9K,EAA6F,uDAAnElB,GAAcgO,EAAqD,uCACtH,OAAQA,EAAO5N,MACX,IAAK,kBACD,OAAO,2BACAc,GAAU8M,EAAOtC,WAE5B,QACI,OAAOxK,MQcN+M,GAAQC,aAAYL,GAASM,aAAgBC,OCtB1DC,IAASvB,OACL,cAAC,IAAMwB,WAAP,UACI,cAAC,IAAD,UACI,cAAC,IAAD,CAAUL,MAAOA,GAAjB,SACI,cAAC,GAAD,UAIZM,SAASC,eAAe,SAM5BnB,O","file":"static/js/main.e86442c5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__uS4YK\",\"navBlock\":\"Header_navBlock__3nd5j\",\"active\":\"Header_active__2gtFF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"SuperInput_superInput__1H0Ml\",\"errorInput\":\"SuperInput_errorInput__umUNx\",\"error\":\"SuperInput_error__nPOYS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"Error_error__25FxY\",\"errorCat\":\"Error_errorCat__3DLWz\",\"item\":\"Error_item__VFFfH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__3X9xY\",\"red\":\"SuperButton_red__3duho\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__RXqEG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inputRadio\":\"SuperRadio_inputRadio__3dkL3\",\"inputText\":\"SuperRadio_inputText__39qJ4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchInput\":\"Search_searchInput__2pzDl\",\"searchDiv\":\"Search_searchDiv__VIPC2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pageDigit\":\"Paginator_pageDigit__19q1x\",\"currentPage\":\"Paginator_currentPage__ORxFH\",\"nextButton\":\"Paginator_nextButton__3_kq5\",\"backButton\":\"Paginator_backButton__1t7e5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filtersWrapper\":\"Packs_filtersWrapper__3z878\",\"range\":\"Packs_range__2Y9HC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginError\":\"Login_loginError__2vEe2\"};","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    // baseURL: 'http://localhost:7542/2.0/',\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true,\r\n})\r\n\r\n//types\r\ntype LoginResponseType = {\r\n    _id: string\r\n    email: string\r\n    rememberMe: boolean,\r\n    isAdmin: boolean,\r\n    name: string\r\n    verified: boolean,\r\n    publicCardPacksCount: number\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    token: string\r\n    tokenDeathTime: number\r\n    avatar: string\r\n    error?: string\r\n}\r\n\r\ntype RegisterResponseType = {\r\n    error?: string\r\n    email?: string\r\n    in?: string\r\n    isEmailValid?: boolean\r\n    isPassValid?: boolean\r\n    emailRegExp?: {},\r\n    passwordRegExp?: string\r\n    addedUser: AddedUserType\r\n}\r\n\r\ntype ChangeProfileResponseType = {\r\n    updatedUser: LoginResponseType\r\n    error?: string\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n//не поняла, почему его не надо типизировать, если он приходит...\r\ntype AddedUserType = {\r\n    _id: string\r\n    email: string\r\n    rememberMe: boolean\r\n    isAdmin: boolean\r\n    name: string\r\n    verified: boolean\r\n    publicCardPacksCount: number\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n}\r\n\r\nconst forgotMessage = `<div style=\"font-size: 1.2em; font-family: Calibri,sans-serif\">For password recovery click: <a href='http://localhost:3000/#/enter_new_password$token$'>here</a></div>`\r\n\r\n\r\nexport const API = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<LoginResponseType>('auth/login', {email, password, rememberMe})\r\n            .then(response => response.data)\r\n    },\r\n    register(email: string, password: string,) {\r\n        return instance.post<RegisterResponseType>('auth/register', {email, password})\r\n            .then(response => response.data)\r\n    },\r\n    authMe() {\r\n        return instance.post<LoginResponseType>('auth/me', {})\r\n            .then(response => response.data)\r\n    },\r\n    changeProfile(name?: string, avatar?: string) {\r\n        return instance.put<ChangeProfileResponseType>('auth/me', {name, avatar})\r\n            .then(response => response.data.updatedUser)\r\n    },\r\n    logout() {\r\n        return instance.delete<{ info: string, error?: string }>('auth/me')\r\n            .then(response => response.data)\r\n    },\r\n    forgotPassword(email: string, from: string = 'test-front-dev <shishkina_veronika_10@mail.ru>', message: string = forgotMessage) {\r\n        return instance.post<{ info: string, error?: string }>('auth/forgot', {email, from, message})\r\n            .then(response => response.data)\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<{ info: string, error?: string }>('auth/set-new-password', {password, resetPasswordToken})\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\nexport type PackType = {\r\n    _id: string, user_id: string, user_name: string, private: boolean, name: string, path: string,\r\n    grade: number, shots: number, deckCover: string, cardsCount: number,\r\n    type: string, rating: number, created: string, updated: string, more_id: string,\r\n    __v: number\r\n}\r\n\r\nexport type ResponsePackType = {\r\n    cardPacks: Array<PackType>\r\n    page: number\r\n    pageCount: number\r\n    cardPacksTotalCount: number,\r\n    minCardsCount: number\r\n    maxCardsCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\n//type for get\r\nexport type QueryPacksType = {\r\n    packName: string\r\n    min: number\r\n    max: number\r\n    sortPacks: string\r\n    page: number\r\n    pageCount: number\r\n    user_id: string\r\n}\r\nconst defaultsQueryPacks: QueryPacksType = {\r\n    packName: '', min: 0, max: 9, sortPacks: '0updated', page: 1, pageCount: 5, user_id: ''\r\n}\r\n\r\n//type for post\r\nexport type CardsPackCreateType = {\r\n    name: string\r\n    path: string\r\n    grade: number\r\n    shots: number\r\n    rating: number\r\n    deckCover: string\r\n    private: boolean\r\n    type: string\r\n}\r\n\r\nexport type CardsPackType = {\r\n    cardsCount: number\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    name: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    deckCover: string\r\n    type: string\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    __v: number\r\n    _id: string\r\n}\r\n\r\nexport type CardsPackResponseType = {\r\n    newCardsPack: CardsPackType\r\n    token: string\r\n    tokenDeathTime: string\r\n}\r\n\r\nexport const packsAPI = {\r\n    fetchPacks(queryObj: Partial<QueryPacksType>) {\r\n        let query: string[] = [];\r\n        (Object.keys(defaultsQueryPacks) as (keyof QueryPacksType)[]).forEach((key: keyof QueryPacksType) => {\r\n            if (queryObj[key]) {\r\n                query.push(`${key}=${queryObj[key]}`);\r\n                return;\r\n            }\r\n            query.push(`${key}=${defaultsQueryPacks[key]}`);\r\n        })\r\n        return instance.get<ResponsePackType>(`cards/pack?${query.join('&')}`)\r\n            .then(response => response.data)\r\n    },\r\n    createPack(cardsPack: Partial<CardsPackCreateType>) {\r\n        return instance.post<CardsPackResponseType>(`cards/pack`, {cardsPack})\r\n            .then(response => response.data)\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`cards/pack?id=${id}`)\r\n            .then(response => response.data)\r\n    },\r\n    updatePack(_id: string, name: string) {\r\n        return instance.put(`cards/pack`, {_id, name})\r\n            .then(response => response.data)\r\n    }\r\n}\r\n\r\nexport type CardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: 0\r\n    _id: string\r\n}\r\n\r\nexport type ResponseCardType = {\r\n    cards: Array<CardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\n//type for get\r\ntype QueryCardsType = {\r\n    cardsPack_id: string\r\n    cardAnswer: string\r\n    cardQuestion: string\r\n    min: number\r\n    max: number\r\n    sortPack: string\r\n    page: number\r\n    pageCount: number\r\n}\r\nconst defaultsQueryCards: QueryCardsType = {\r\n    cardsPack_id: '',\r\n    cardAnswer: '',\r\n    cardQuestion: '',\r\n    sortPack: '0grade',\r\n    min: 1,\r\n    max: 4,\r\n    page: 1,\r\n    pageCount: 7\r\n}\r\n\r\n//type for post\r\nexport type CardCreateType = {\r\n    cardsPack_id: string\r\n    question: string\r\n    answer: string\r\n    grade: number\r\n    shots: number\r\n    rating: number\r\n    answerImg: string\r\n    questionImg: string\r\n    questionVideo: string\r\n    answerVideo: string\r\n    type: string\r\n}\r\n\r\nexport const cardsAPI = {\r\n    fetchCards(queryObj: Partial<QueryCardsType>) {\r\n        let query: string[] = [];\r\n        (Object.keys(defaultsQueryCards) as (keyof QueryCardsType)[]).forEach((key: keyof QueryCardsType) => {\r\n            if (queryObj[key]) {\r\n                query.push(`${key}=${queryObj[key]}`);\r\n                return;\r\n            }\r\n            query.push(`${key}=${defaultsQueryCards[key]}`);\r\n        })\r\n        return instance.get<ResponseCardType>(`cards/card?${query.join('&')}`)\r\n            .then(response => response.data)\r\n    },\r\n    createCard(card: CardCreateType) {\r\n        return instance.post(`cards/card`, {card})\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete(`cards/card?id=${id}`)\r\n            .then(response => response.data)\r\n    },\r\n    updateCard(_id: string, question: string = 'new question', comments: string = 'new comments') {\r\n        return instance.put(`cards/card`, {_id, question, comments})\r\n            .then(response => response.data)\r\n    }\r\n}","import {API} from \"../m3-dal/api\";\r\nimport {AppThunkType} from \"../m2-bll/store\";\r\n\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\"\r\n\r\nexport type AppReducerActionType = ReturnType<typeof setAppStatusAC> | ReturnType<typeof setIsInitializedAC>\r\n\r\nconst initialState = {\r\n    status: \"idle\" as RequestStatusType,\r\n    isInitialized: false\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"APP/SET-APP-STATUS\":\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        case \"APP/SET-IS-INITIALIZED\":\r\n            return {\r\n                ...state,\r\n                isInitialized: action.isInitialized\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) =>\r\n    ({type: \"APP/SET-APP-STATUS\", status} as const)\r\nexport const setIsInitializedAC = (isInitialized: boolean) =>\r\n    ({type: \"APP/SET-IS-INITIALIZED\", isInitialized} as const)\r\n\r\nexport const initializedAppTC = (): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    API.authMe()\r\n        .then(() => {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n            dispatch(setIsInitializedAC(true))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n\r\n}","import {API} from '../../../n1-main/m3-dal/api';\r\nimport {setAppStatusAC} from '../../../n1-main/m1-ui/app-reducer';\r\nimport {AppThunkType} from '../../../n1-main/m2-bll/store';\r\n\r\n//types\r\nexport type AuthReducerActionType = ReturnType<typeof setLoginData>\r\n    | ReturnType<typeof setIsLoggedIn>\r\n    | ReturnType<typeof setLoginError>\r\n\r\ntype UserDataType = {\r\n    email: string | null,\r\n    _id: string | null,\r\n    avatar: string | null,\r\n    name: string | null,\r\n    publicCardPacksCount: number\r\n}\r\n\r\ntype InitialStateType = { userData: UserDataType, isLoggedIn: boolean, loginError: null | string }\r\n\r\n\r\nconst initialState = {\r\n    userData: {\r\n        email: null,\r\n        _id: null,\r\n        avatar: null,\r\n        name: null,\r\n        publicCardPacksCount: 0,\r\n    },\r\n    isLoggedIn: false,\r\n    loginError: null\r\n}\r\n\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'auth/SET-USER-DATA': {\r\n            return {...state, ...action.data}\r\n        }\r\n        case 'auth/SET-IS-LOGGED-IN': {\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        }\r\n        case 'auth/SET-LOGIN-ERROR': {\r\n            return {...state, loginError: action.loginError}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\nexport const setLoginData = (data: UserDataType) => ({type: 'auth/SET-USER-DATA', data} as const)\r\nexport const setIsLoggedIn = (isLoggedIn: boolean) => ({type: 'auth/SET-IS-LOGGED-IN', isLoggedIn} as const)\r\nexport const setLoginError = (loginError: string) => ({type: 'auth/SET-LOGIN-ERROR', loginError} as const)\r\n\r\n//thunks\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    API.login(email, password, rememberMe)\r\n        .then(response => {\r\n            const {email, _id, avatar, name, publicCardPacksCount} = response;\r\n            dispatch(setLoginData({email, _id, avatar, name, publicCardPacksCount}));\r\n            dispatch(setIsLoggedIn(true));\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(e => {\r\n            const error = e.response ? e.response.data.error : (e.message + ', more details in the console')\r\n            dispatch(setLoginError(error));\r\n            dispatch(setAppStatusAC('failed'));\r\n        })\r\n}\r\n\r\nexport const logOutTC = (): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    API.logout()\r\n        .then(response => {\r\n            dispatch(setIsLoggedIn(false));\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setAppStatusAC('failed'));\r\n        })\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginTC} from './auth-reducer';\r\nimport {AppRootStateType} from '../../../n1-main/m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from '../../../n1-main/m1-ui/routes/Routes';\r\nimport styles from './Login.module.css';\r\nimport {RequestStatusType} from \"../../../n1-main/m1-ui/app-reducer\";\r\n\r\nconst Login: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const loginError = useSelector<AppRootStateType, string | null>(state => state.auth.loginError);\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [rememberMe, setRememberMe] = useState(false);\r\n\r\n\r\n    const onLoginFormSubmitHandler = () => {\r\n        dispatch(loginTC(email, password, rememberMe));\r\n    }\r\n\r\n    const onEmailChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(event.currentTarget.value);\r\n    }\r\n    const onPasswordChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(event.currentTarget.value);\r\n    }\r\n    const onRememberMeChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setRememberMe(event.currentTarget.checked);\r\n    }\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n    return (\r\n        <div>\r\n            Login\r\n            <form>\r\n                <div>\r\n                    <input type=\"text\" onChange={onEmailChangeHandler}/>\r\n                </div>\r\n                <div>\r\n                    <input type=\"password\" onChange={onPasswordChangeHandler}/>\r\n                </div>\r\n                <div>\r\n                    <input type=\"checkbox\" onChange={onRememberMeChangeHandler}/>\r\n                    Remember me\r\n                </div>\r\n                <button type={'submit'} onClick={onLoginFormSubmitHandler} disabled={appStatus === \"loading\"}>log in</button>\r\n            </form>\r\n            {loginError ? <div className={styles.loginError}>{loginError}</div> : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n","import {API} from \"../../../n1-main/m3-dal/api\";\r\nimport {AppThunkType} from \"../../../n1-main/m2-bll/store\";\r\nimport {setAppStatusAC} from \"../../../n1-main/m1-ui/app-reducer\";\r\n\r\nexport type RegisterReducerActionType = ReturnType<typeof setIsRegistrationDataAC>\r\n\r\ntype RegisterType = {\r\n    isRegistration: boolean\r\n}\r\n\r\nconst initialState = {} as RegisterType\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const registerReducer = (state: InitialStateType = initialState, action: RegisterReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"REGISTER/SET-IS-REGISTRATION-DATA\":\r\n            return {\r\n                ...state,\r\n                isRegistration: action.isRegistration\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setIsRegistrationDataAC = (isRegistration: boolean) =>\r\n    ({type: \"REGISTER/SET-IS-REGISTRATION-DATA\", isRegistration} as const)\r\n\r\nexport const registerTC = (email: string, password: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    API.register(email, password)\r\n        .then(() => {\r\n            dispatch(setIsRegistrationDataAC(true))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(response => {\r\n            console.log(response.error)\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {registerTC} from \"./register-reducer\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../n1-main/m1-ui/routes/Routes\";\r\nimport style from \"./Registration.module.css\"\r\nimport {RequestStatusType} from \"../../../n1-main/m1-ui/app-reducer\";\r\n\r\nconst Registration: React.FC = () => {\r\n\r\n    const [email, setEmail] = useState<string>(\"\")\r\n    const [password, setPassword] = useState<string>(\"\")\r\n\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const isRegistration = useSelector<AppRootStateType, boolean>(state => state.register.isRegistration)\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeEmailHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangePasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onRegistrationHandler = () => {\r\n        if (password === \"\" || email === \"\") {\r\n            alert(\"Field is required\")\r\n        } else {\r\n            dispatch(registerTC(email, password))\r\n            setEmail(\"\")\r\n            setPassword(\"\")\r\n        }\r\n    }\r\n\r\n    if (isRegistration) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.registrationContainer}>\r\n            <h1>Registration: </h1>\r\n            <form className={style.formBlock}>\r\n                <div>\r\n                    <span>Email: </span><input placeholder=\"Enter email...\" type=\"email\" value={email}\r\n                                               onChange={onChangeEmailHandler}/>\r\n                </div>\r\n                <div>\r\n                    <span>Password: </span><input placeholder=\"Enter password...\" type=\"password\" value={password}\r\n                                                  onChange={onChangePasswordHandler}/>\r\n                </div>\r\n                <div>\r\n                    <button type=\"submit\" onClick={onRegistrationHandler} disabled={appStatus === \"loading\"}>Register\r\n                    </button>\r\n                </div>\r\n            </form>\r\n            <div>\r\n                <NavLink to={PATH.LOGIN}>login</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration","import {API} from \"../../../n1-main/m3-dal/api\";\r\nimport {AppThunkType} from \"../../../n1-main/m2-bll/store\";\r\nimport {setAppStatusAC} from \"../../../n1-main/m1-ui/app-reducer\";\r\n\r\nexport type RecoveryReducerActionType = ReturnType<typeof setIsForgotPasswordAC>\r\n\r\ntype RecoveryType = {\r\n    isForgotPassword: boolean\r\n}\r\n\r\nconst initialState = {} as RecoveryType\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const recoveryReducer = (state: InitialStateType = initialState, action: RecoveryReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"RECOVERY/SET-IS-FORGOT-PASSWORD\":\r\n            return {\r\n                ...state,\r\n                isForgotPassword: action.isForgot\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst setIsForgotPasswordAC = (isForgot: boolean) =>\r\n    ({type: \"RECOVERY/SET-IS-FORGOT-PASSWORD\", isForgot})\r\n\r\nexport const forgotPasswordTC = (email: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    API.forgotPassword(email)\r\n        .then(() => {\r\n            dispatch(setIsForgotPasswordAC(true))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(response => {\r\n            console.log(response.error)\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../n1-main/m1-ui/routes/Routes\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {forgotPasswordTC} from \"./recovery-reducer\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\n\r\nconst RecoveryPassword: React.FC = () => {\r\n\r\n    const [restoredPassword, setRestoredPassword] = useState<string>(\"\")\r\n    const dispatch = useDispatch()\r\n    const isForgotPassword = useSelector<AppRootStateType, boolean>(state => state.forgot.isForgotPassword)\r\n\r\n    const onChangeRestoredPasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setRestoredPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onRestoredPasswordHandler = () => {\r\n        dispatch(forgotPasswordTC(restoredPassword))\r\n    }\r\n\r\n    if (isForgotPassword) {\r\n        return <Redirect to={PATH.ENTER_NEW_PASSWORD}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form>\r\n                <span>Email: </span><input placeholder=\"Enter email...\" type=\"email\" value={restoredPassword}\r\n                                           onChange={onChangeRestoredPasswordHandler}/>\r\n                <div>\r\n                    <button type=\"submit\" onClick={onRestoredPasswordHandler}>Send</button>\r\n                </div>\r\n            </form>\r\n            <div>\r\n                <NavLink to={PATH.LOGIN}>login</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RecoveryPassword","import {AppThunkType} from \"../../../n1-main/m2-bll/store\";\r\nimport {setAppStatusAC} from \"../../../n1-main/m1-ui/app-reducer\";\r\nimport {API} from \"../../../n1-main/m3-dal/api\";\r\n\r\nexport type EnterNewPasswordReducerActionType = ReturnType<typeof setIsNewPasswordAC>\r\n\r\ntype EnterNewPasswordType = {\r\n    isNewPassword: boolean\r\n}\r\n\r\nconst initialState = {} as EnterNewPasswordType\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const enterNewPasswordReducer = (state: InitialStateType = initialState, action: EnterNewPasswordReducerActionType) => {\r\n    switch (action.type) {\r\n        case \"ENTER-NEW-PASSWORD/SET-IS-NEW-PASSWORD\":\r\n            return {\r\n                ...state,\r\n                isNewPassword: action.isNewPassword\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsNewPasswordAC = (isNewPassword: boolean) =>\r\n    ({type: \"ENTER-NEW-PASSWORD/SET-IS-NEW-PASSWORD\", isNewPassword} as const)\r\n\r\nexport const setNewPasswordTC = (newPassword: string, passwordToken: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    API.setNewPassword(newPassword, passwordToken)\r\n        .then(() => {\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n            dispatch(setIsNewPasswordAC(true))\r\n        })\r\n        .catch(response => {\r\n            console.log(response.error)\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n}","import React, {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../n1-main/m2-bll/store\";\r\nimport {NavLink, Redirect, RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {PATH} from \"../../../n1-main/m1-ui/routes/Routes\";\r\nimport {setNewPasswordTC} from \"./enterNewPassword-reducer\";\r\n\r\ntype PathParamsType = {\r\n    token: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType>\r\n\r\nconst EnterNewPassword: React.FC<PropsType> = (props) => {\r\n\r\n    const [newPassword, setNewPassword] = useState<string>(\"\")\r\n    const [correctNewPassword, setCorrectNewPassword] = useState<string>(\"\")\r\n\r\n    const dispatch = useDispatch()\r\n    const isNewPassword = useSelector<AppRootStateType, boolean>(state => state.newPassword.isNewPassword)\r\n\r\n    const onChangeNewPasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onChangeCorrectNewPasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setCorrectNewPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const onSetNewPasswordHandler = () => {\r\n        if (newPassword === correctNewPassword) {\r\n            dispatch(setNewPasswordTC(newPassword, props.match.params.token))\r\n        } else {\r\n            alert(\"Passwords isn't equal\")\r\n        }\r\n    }\r\n\r\n    if (isNewPassword) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n            <form>\r\n                <input type=\"password\" value={newPassword}\r\n                       onChange={onChangeNewPasswordHandler}/>\r\n                <input type=\"password\" value={correctNewPassword}\r\n                       onChange={onChangeCorrectNewPasswordHandler}/>\r\n                <div>\r\n                    <button type=\"submit\" onClick={onSetNewPasswordHandler}>Send</button>\r\n                </div>\r\n            </form>\r\n            <div>\r\n                <NavLink to={PATH.LOGIN}>login</NavLink>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default withRouter(EnterNewPassword)","import React from \"react\";\r\nimport style from \"./Error.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../n1-main/m1-ui/routes/Routes\";\r\n\r\nconst Error: React.FC = () => {\r\n    return (\r\n        <div className={style.error}>\r\n            <div>ERROR 404</div>\r\n            <div>The cat couldn't find a page!</div>\r\n            <div className={style.errorCat}>—ฅ/ᐠ.̫ .ᐟ\\ฅ—</div>\r\n            <nav>\r\n                <div className={style.item}>\r\n                    <NavLink to={PATH.PROFILE}>go home</NavLink>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Error;","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    text:string\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red,text, className,\r\n        ...restProps\r\n    }\r\n) => {\r\n\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`;\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps}\r\n        >{text}</button>\r\n\r\n    );\r\n}\r\n\r\nexport default SuperButton;","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from \"react\";\r\nimport s from \"./SuperInput.module.css\";\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    supperInputClassName?: string\r\n};\r\n\r\nconst SuperInput: React.FC<SuperInputTextPropsType> = (\r\n    {\r\n        type,\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange\r\n        && onChange(e);\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value);\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        e.key === \"Enter\"\r\n        && onEnter\r\n        && onEnter();\r\n    }\r\n\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : \"\"}`;\r\n\r\n    const finalInputClassName = `${s.errorInputError} ${error ? s.errorInput : s.superInput} `;\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={\"text\"}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps}\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperInput;","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from \"react\";\r\nimport s from \"./SuperCheckbox.module.css\"\r\n\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>;\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n};\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type,\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children,\r\n\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange\r\n        && onChange(e);\r\n\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : \"\"}`;\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={\"checkbox\"}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps}\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label>\r\n    );\r\n}\r\n\r\nexport default SuperCheckbox;\r\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperRadio.module.css\"\r\n\r\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperRadioPropsType = DefaultRadioPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n}\r\n\r\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\r\n    {\r\n        type, name,\r\n        options, value,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChangeOption && onChangeOption(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    const mappedOptions: any[] = options ? options.map((o, i) => (\r\n        <label key={name + \"-\" + i} className={s.inputRadio}>\r\n            <input\r\n                type={\"radio\"}\r\n                onChange={onChangeCallback}\r\n                name={name}\r\n                {...restProps}\r\n            />\r\n            <span className={s.inputText}>{o}</span>\r\n        </label>\r\n    )) : [];\r\n\r\n    return (\r\n        <>\r\n            {mappedOptions}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default SuperRadio;\r\n","import React from \"react\";\r\nimport SuperButton from \"../common/super-button/SuperButton\";\r\nimport SuperInput from \"../common/super-input/SuperInput\";\r\nimport SuperCheckbox from \"../common/super-checkbox/SuperCheckbox\";\r\nimport SuperRadio from \"../common/super-radio/SuperRadio\";\r\n\r\nconst TestPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <SuperButton text={'a'}/>\r\n            <SuperInput/>\r\n            <SuperCheckbox/>\r\n            <SuperRadio/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestPage","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../m2-bll/store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from '../routes/Routes';\r\nimport {RequestStatusType} from '../app-reducer';\r\nimport {logOutTC} from '../../../n2-features/f1-auth/a1-login/auth-reducer';\r\n\r\n\r\nconst Profile: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n\r\n    const onLogOutHandler = () => {\r\n        dispatch(logOutTC());\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            Profile\r\n            <br/>\r\n            <button onClick={onLogOutHandler} disabled={appStatus === 'loading'}>Log out</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile","import {CardsPackCreateType, packsAPI, QueryPacksType, ResponsePackType} from '../../m3-dal/api'\r\nimport {AppThunkType} from '../../m2-bll/store';\r\nimport {setAppStatusAC, setIsInitializedAC} from '../app-reducer';\r\n\r\nexport type PacksReducerActionType = ReturnType<typeof setPacksDataAC>\r\n    | ReturnType<typeof setPageValueAC>\r\n    | ReturnType<typeof setPagesCountAC>\r\n    | ReturnType<typeof updateCardsPackAC>\r\n    | ReturnType<typeof deleteCardsPackAC>\r\n// | ReturnType<typeof createCardsPackAC>\r\n\r\nconst initialState = {} as ResponsePackType\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const packsReducer = (state: InitialStateType = initialState, action: PacksReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'PACKS/SET-PACKS':\r\n            return {\r\n                ...state, ...action.packsData\r\n            }\r\n        case 'SET-CURRENT-PAGE-VALUE': {\r\n            return {...state, page: action.value}\r\n        }\r\n        case 'SET-CURRENT-PAGES-COUNT': {\r\n            return {...state, pageCount: action.value}\r\n        }\r\n        case 'PACKS/UPDATE-CARDS-PACK':\r\n            return {\r\n                ...state,\r\n                cardPacks: state.cardPacks.map(p => p._id === action.id ? {...p, name: action.name} : p)\r\n            }\r\n        case 'PACKS/DELETE-CARDS-PACK':\r\n            return {\r\n                ...state,\r\n                cardPacks: state.cardPacks.filter(p => p._id !== action.id)\r\n            }\r\n        // case \"PACKS/CREATE-CARDS-PACK\":\r\n        //     debugger\r\n        //     return {\r\n        //         ...state,\r\n        //         cardPacks: [{...action.cardsPack, ...state.cardPacks}]\r\n        //     }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setPacksDataAC = (packsData: ResponsePackType) =>\r\n    ({type: 'PACKS/SET-PACKS', packsData} as const)\r\n\r\nexport const setPageValueAC = (value: number) => ({type: 'SET-CURRENT-PAGE-VALUE', value} as const)\r\nexport const setPagesCountAC = (value: number) => ({type: 'SET-CURRENT-PAGES-COUNT', value} as const)\r\n\r\nexport const updateCardsPackAC = (id: string, name: string) =>\r\n    ({type: 'PACKS/UPDATE-CARDS-PACK', id, name} as const)\r\n\r\nexport const deleteCardsPackAC = (id: string) =>\r\n    ({type: 'PACKS/DELETE-CARDS-PACK', id} as const)\r\n\r\n// export const createCardsPackAC = (cardsPack: CardsPackType) =>\r\n//     ({type: 'PACKS/CREATE-CARDS-PACK', cardsPack} as const)\r\n\r\nexport const fetchPacksTC = (queryObj?: Partial<QueryPacksType>): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.fetchPacks(queryObj || {})\r\n        .then(response => {\r\n            console.log(response)\r\n            dispatch(setPacksDataAC(response))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const createCardsPackTC = (cardsPack: Partial<CardsPackCreateType>): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.createPack(cardsPack)\r\n        .then(response => {\r\n            dispatch(fetchPacksTC())\r\n            // dispatch(createCardsPackAC(response.newCardsPack))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const updateCardsPackTC = (id: string, newName: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.updatePack(id, newName)\r\n        .then(() => {\r\n            dispatch(updateCardsPackAC(id, newName))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\nexport const deleteCardsPackTC = (id: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    packsAPI.deletePack(id)\r\n        .then(() => {\r\n            dispatch(deleteCardsPackAC(id))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\n\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../../routes/Routes\";\r\nimport {PackType} from \"../../../m3-dal/api\";\r\n\r\ntype PackPropsType = {\r\n    pack: PackType\r\n    updateCardsPackName: (id: string) => void\r\n    deleteCardsPack: (id: string) => void\r\n}\r\n\r\nexport const Pack: React.FC<PackPropsType> = (props) => {\r\n\r\n\r\n    return (\r\n        <>\r\n            <tr>\r\n                <td>{props.pack.name}</td>\r\n                <td>{props.pack.cardsCount}</td>\r\n                <td>{props.pack.updated}</td>\r\n                <td>{props.pack.type}</td>\r\n                <td>\r\n                    <button onClick={() => props.deleteCardsPack(props.pack._id)}>del</button>\r\n                    <button onClick={() => props.updateCardsPackName(props.pack._id)}>update</button>\r\n                    <NavLink to={`${PATH.CARDS}/${props.pack._id}`}>cards</NavLink>\r\n                </td>\r\n            </tr>\r\n        </>\r\n    );\r\n}","import {AppThunkType} from '../../m2-bll/store';\r\nimport {fetchPacksTC, setPagesCountAC, setPageValueAC} from '../packs/packs-reducer';\r\nimport {QueryPacksType} from '../../m3-dal/api';\r\n\r\ntype ActionsType = ReturnType<typeof setSearchValueAC> | ReturnType<typeof setMinMaxValuesAC>\r\n\r\nconst initialState = {\r\n    search: '',\r\n    min: 0,\r\n    max: 5\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const filterReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-SEARCH-VALUE': {\r\n            return {...state, search: action.value}\r\n        }\r\n        case 'SET-MIN-MAX-VALUES': {\r\n            return {...state, min: action.values[0], max: action.values[1]}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//actions\r\n\r\nexport const setSearchValueAC = (value: string) => ({type: 'SET-SEARCH-VALUE', value} as const)\r\nexport const setMinMaxValuesAC = (values: number[]) => ({type: 'SET-MIN-MAX-VALUES', values} as const)\r\n\r\n\r\n//thunks\r\n\r\nexport const getPacksWithFilters = (): AppThunkType => (dispatch, getState) => {\r\n    let search = getState().filter.search;\r\n    let min = getState().filter.min;\r\n    let max = getState().filter.max;\r\n    const searchParams = {packName: search, min: min, max: max} as Partial<QueryPacksType>\r\n    dispatch(fetchPacksTC(searchParams))\r\n}\r\n\r\nexport const onPacksPageClickTC = (newPage: number): AppThunkType => (dispatch) => {\r\n    dispatch(setPageValueAC(newPage));\r\n    const params = {page: newPage}\r\n    dispatch(fetchPacksTC(params))\r\n}\r\n\r\nexport const onPortionPacksChangeTC = (pagesCount: number): AppThunkType => (dispatch) => {\r\n    dispatch(setPagesCountAC(pagesCount))\r\n    dispatch(fetchPacksTC({pageCount: pagesCount}))\r\n}\r\n\r\nexport const sortPackTC = (sortPacks: string): AppThunkType => (dispatch) => {\r\n    dispatch(fetchPacksTC({sortPacks}))\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../m2-bll/store';\r\nimport styles from './Search.module.css';\r\n\r\n\r\ntype SearchPropsType = {\r\n    setSearch: (value: string) => void\r\n}\r\n\r\nconst Search: React.FC<SearchPropsType> = (props) => {\r\n    // useEffect(() => {\r\n    //     packsAPI.fetchPack().then(response => console.log(response))\r\n    // }, [])\r\n\r\n\r\n    const search = useSelector<AppRootStateType, string>(state => state.filter.search)\r\n\r\n    const [searchValue, setSearchValue] = useState(search);\r\n    const [timeoutId, setTimeoutId] = useState<number>();\r\n\r\n    const onSearchChange = (event: ChangeEvent<HTMLInputElement>) => {\r\n        let value = event.currentTarget.value;\r\n        setSearchValue(value);\r\n        props.setSearch(value)\r\n        //\r\n        // clearTimeout(timeoutId);\r\n        //\r\n        // let id = window.setTimeout(() => {\r\n        //     props.setSearch(value)\r\n        // }, 1000)\r\n        //\r\n        // setTimeoutId(id);\r\n    }\r\n\r\n    return (\r\n        <div className={styles.searchDiv}>\r\n            <input type=\"text\"\r\n                   placeholder={'Search...'}\r\n                   onChange={onSearchChange}\r\n                   value={searchValue}\r\n                   className={styles.searchInput}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;","import React, {ChangeEvent} from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\ntype SuperDoubleRangePropsType = {\r\n    onChangeRange: (value: [number, number]) => void\r\n    value: number | number[]\r\n    className?: string\r\n}\r\n\r\nconst SuperDoubleRange: React.FC<SuperDoubleRangePropsType> = (props) => {\r\n\r\n    const handleChange = (event: ChangeEvent<{}>, newValue: any) => {\r\n        props.onChangeRange([newValue[0], newValue[1]])\r\n    };\r\n\r\n    return (\r\n        <div className={props.className ? props.className : ''}>\r\n            <Typography id=\"range-slider2\" gutterBottom>\r\n            </Typography>\r\n            <Slider\r\n                value={props.value}\r\n                onChange={handleChange}\r\n                valueLabelDisplay=\"on\"\r\n                aria-labelledby=\"range-slider2\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default SuperDoubleRange;","import React, {useEffect, useState} from 'react';\r\nimport {v1} from 'uuid';\r\nimport styles from './Paginator.module.css';\r\nimport SuperButton from '../super-button/SuperButton';\r\n\r\ntype PaginatorPropsType = {\r\n    totalCount: number\r\n    currentPage: number\r\n    portionSize: number\r\n    pagesPortionSize: number\r\n    onPageClickHandler: (item: number) => void\r\n    className?: string\r\n}\r\n\r\nconst Paginator: React.FC<PaginatorPropsType> = (props) => {\r\n\r\n    const [portionNumber, setPortionNumber] = useState<number>(1);\r\n    const [leftBorder, setLeftBorder] = useState<number>((portionNumber - 1) * props.pagesPortionSize + 1);\r\n    const [rightBorder, setRightBorder] = useState<number>(portionNumber * props.pagesPortionSize);\r\n    const generatePages = () => {\r\n        let tempPages = []\r\n        for (let i = leftBorder; i <= rightBorder; i++) {\r\n            tempPages.push(i);\r\n        }\r\n        return tempPages;\r\n    }\r\n    const [pages, setPages] = useState<Array<number>>(generatePages());\r\n\r\n    const pagesCount = Math.ceil(props.totalCount / props.portionSize);\r\n\r\n\r\n    useEffect(() => {\r\n        let tempPages = [];\r\n        for (let i = leftBorder; i <= rightBorder; i++) {\r\n            tempPages.push(i);\r\n        }\r\n        setPages(tempPages);\r\n    }, [leftBorder, rightBorder])\r\n\r\n    const onPageClickHandler = (page: number) => {\r\n        setPortionNumber(page);\r\n        props.onPageClickHandler(page);\r\n    }\r\n    const onNextButtonClick = () => {\r\n        setLeftBorder(leftBorder + 10);\r\n        setRightBorder(rightBorder + 10);\r\n    }\r\n    const onBackButtonClick = () => {\r\n        setLeftBorder(leftBorder - 10);\r\n        setRightBorder(rightBorder - 10);\r\n    }\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {leftBorder !== 1\r\n                ? <SuperButton text={'back'} onClick={onBackButtonClick}/>\r\n                : ''}\r\n            {pages.map(page => <span key={v1()}\r\n                                     className={`${styles.pageDigit} ${page === props.currentPage\r\n                                         ? styles.currentPage\r\n                                         : ''}`}\r\n                                     onClick={() => onPageClickHandler(page)}>{page}</span>)}\r\n            {rightBorder !== pagesCount\r\n                ? <SuperButton text={'next'} onClick={onNextButtonClick}/>\r\n                : ''}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\n\r\nexport const Preloader: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <span>Loading...</span>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../m2-bll/store';\r\nimport {CardsPackCreateType, PackType} from '../../m3-dal/api';\r\nimport {\r\n    createCardsPackTC, deleteCardsPackAC,\r\n    deleteCardsPackTC,\r\n    fetchPacksTC,\r\n    updateCardsPackAC,\r\n    updateCardsPackTC\r\n} from './packs-reducer';\r\nimport {Pack} from './Pack/Pack';\r\nimport {\r\n    getPacksWithFilters,\r\n    onPacksPageClickTC,\r\n    onPortionPacksChangeTC,\r\n    setMinMaxValuesAC,\r\n    setSearchValueAC, sortPackTC\r\n} from '../Search/filter-reducer';\r\nimport Search from '../Search/Search';\r\nimport SuperButton from '../common/super-button/SuperButton';\r\nimport SuperDoubleRange from '../common/super-double-range/SuperDoubleRange';\r\nimport Paginator from '../common/paginator/Paginator';\r\nimport styles from './Packs.module.css';\r\nimport {Preloader} from '../common/preloader/Preloader';\r\n\r\nexport const Packs: React.FC = () => {\r\n\r\n    const packs = useSelector<AppRootStateType, Array<PackType>>(state => state.packs.cardPacks)\r\n    const cardPacksTotalCount = useSelector<AppRootStateType, number>(state => state.packs.cardPacksTotalCount)\r\n    const page = useSelector<AppRootStateType, number>(state => state.packs.page)\r\n    const pageCount = useSelector<AppRootStateType, number>(state => state.packs.pageCount)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const minRedux = useSelector<AppRootStateType, number>(state => state.filter.min);\r\n    const maxRedux = useSelector<AppRootStateType, number>(state => state.filter.max);\r\n\r\n\r\n    const [min, setMin] = useState<number>(minRedux);\r\n    const [max, setMax] = useState<number>(maxRedux);\r\n    const [pagesCount, setPagesCount] = useState<number>(pageCount);\r\n\r\n    const onChangeRangeHandler = (values: number[]) => {\r\n        setMin(values[0]);\r\n        setMax(values[1]);\r\n        dispatch(setMinMaxValuesAC(values));\r\n    }\r\n\r\n    const onPageClickHandler = (newPage: number) => {\r\n        dispatch(onPacksPageClickTC(newPage))\r\n    }\r\n\r\n    const onPagesCountChangeHandler = (event: ChangeEvent<HTMLSelectElement>) => {\r\n        setPagesCount(+event.currentTarget.value)\r\n        dispatch(onPortionPacksChangeTC(+event.currentTarget.value))\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPacksTC())\r\n    }, [])\r\n\r\n    const pagesOptions = [5, 10, 15, 20, 25]\r\n    const pagesOptionsTags = pagesOptions.map(item => <option value={item} key={item}>{item}</option>)\r\n\r\n    const onAddCardsPackHandler = () => {\r\n        let cardsPack = {\r\n            name: \"NEWCardsPackVA\"\r\n        } as Partial<CardsPackCreateType>\r\n        dispatch(createCardsPackTC(cardsPack))\r\n    }\r\n\r\n    const onUpdateCardsPackNameHandler = (id: string) => {\r\n        const name = \"new name Cards Packs\"\r\n        // dispatch(updateCardsPackTC(id,name))\r\n        dispatch(updateCardsPackAC(id, name))\r\n    }\r\n\r\n    const onDeleteCardsPackHandler = (id: string) => {\r\n        // dispatch(deleteCardsPackTC(id))\r\n        dispatch(deleteCardsPackAC(id))\r\n    }\r\n\r\n    if (!packs) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3 style={{paddingBottom: '20px'}}>Packs Page</h3>\r\n            <div className={styles.filtersWrapper}>\r\n                <Search setSearch={(value) => {\r\n                    dispatch(setSearchValueAC(value))\r\n                }}/>\r\n                <div>\r\n                    <SuperDoubleRange onChangeRange={onChangeRangeHandler}\r\n                                      value={[min, max]}\r\n                                      className={styles.range}/>\r\n                    <p>Choose cards count in pack</p>\r\n                </div>\r\n                <SuperButton text={'search'}\r\n                             onClick={() => dispatch(getPacksWithFilters())}/>\r\n            </div>\r\n            <div>\r\n                <Paginator totalCount={cardPacksTotalCount}\r\n                           currentPage={page}\r\n                           portionSize={pageCount}\r\n                           pagesPortionSize={10}\r\n                           onPageClickHandler={onPageClickHandler}/>\r\n                <select name=\"pagesCountSelect\"\r\n                        id=\"pagesCountSelect\"\r\n                        value={pagesCount}\r\n                        onChange={onPagesCountChangeHandler}>\r\n                    {pagesOptionsTags}\r\n                </select>\r\n            </div>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>Name</th>\r\n                    <th>Cards Count\r\n                        <button onClick={() => dispatch(sortPackTC('0cardsCount'))}>&#8593;</button>\r\n                        <button onClick={() => dispatch(sortPackTC('1cardsCount'))}>&#8595;</button>\r\n                    </th>\r\n                    <th>Update</th>\r\n                    <th>Url</th>\r\n                    <th>\r\n                        <button onClick={onAddCardsPackHandler}>Add</button>\r\n                    </th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {packs && packs.map(p => {\r\n                    return <Pack key={p._id}\r\n                                 pack={p}\r\n                                 deleteCardsPack={onDeleteCardsPackHandler}\r\n                                 updateCardsPackName={onUpdateCardsPackNameHandler}/>\r\n                })}\r\n                </tbody>\r\n            </table>\r\n        </>);\r\n}","import {CardCreateType, cardsAPI, ResponseCardType} from \"../../m3-dal/api\"\r\nimport {AppThunkType} from \"../../m2-bll/store\";\r\nimport {setAppStatusAC, setIsInitializedAC} from \"../app-reducer\";\r\n\r\nexport type CardsReducerActionType = ReturnType<typeof setCardsDataAC>\r\n\r\nconst initialState = {} as ResponseCardType\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const cardsReducer = (state: InitialStateType = initialState, action: CardsReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case \"CARDS/SET_CARDS\":\r\n            return {\r\n                ...state, ...action.cardsData\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setCardsDataAC = (cardsData: ResponseCardType) =>\r\n    ({type: \"CARDS/SET_CARDS\", cardsData} as const)\r\n\r\nexport const fetchCardsTC = (id: string): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    cardsAPI.fetchCards({cardsPack_id: id})\r\n        .then(response => {\r\n            dispatch(setCardsDataAC(response))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n}\r\n\r\nexport const createCardTC = (card: CardCreateType): AppThunkType => dispatch => {\r\n    dispatch(setAppStatusAC(\"loading\"))\r\n    cardsAPI.createCard(card)\r\n        .then(response => {\r\n            dispatch(fetchCardsTC(response.data.card._id))\r\n            dispatch(setAppStatusAC(\"succeeded\"))\r\n        })\r\n        .catch(error => {\r\n            console.log(error)\r\n            dispatch(setIsInitializedAC(true))\r\n            dispatch(setAppStatusAC(\"failed\"))\r\n        })\r\n}\r\n","import React from \"react\";\r\nimport {CardType} from \"../../../m3-dal/api\";\r\n\r\ntype CardPropsType = {\r\n    card: CardType\r\n}\r\n\r\nexport const Card: React.FC<CardPropsType> = (props) => {\r\n    return (\r\n        <>\r\n            <tr>\r\n                <td>{props.card.question}</td>\r\n                <td>{props.card.answer}</td>\r\n                <td>{props.card.grade}</td>\r\n                <td>{props.card.updated}</td>\r\n                <td>{props.card.rating}</td>\r\n            </tr>\r\n        </>\r\n    );\r\n}","import React, {useEffect} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {CardType} from \"../../m3-dal/api\";\r\nimport {createCardTC, fetchCardsTC} from \"./cards-reducer\";\r\nimport {Card} from \"./Card/Card\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\n\r\ntype PathParamsType = {\r\n    cardsPack_id: string\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType>\r\n\r\nconst Cards: React.FC<PropsType> = (props) => {\r\n\r\n    const cards = useSelector<AppRootStateType, Array<CardType>>(state => state.cards.cards)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCardsTC(props.match.params.cardsPack_id))\r\n    }, [])\r\n\r\n    const onAddCardHandler = () => {\r\n        const card = {\r\n            cardsPack_id: props.match.params.cardsPack_id, question: \"\", answer: \"\", grade: 0,\r\n            shots: 0, rating: 0, answerImg: \"\", questionImg: \"\", questionVideo: \"\", answerVideo: \"\", type: \"\"\r\n        }\r\n        dispatch(createCardTC(card))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h3>Cards Page</h3>\r\n            <table>\r\n                <thead>\r\n                <tr>\r\n                    <th>Question</th>\r\n                    <th>Answer</th>\r\n                    <th>Grade</th>\r\n                    <th>Update</th>\r\n                    <th>Url</th>\r\n                    <th>\r\n                        <button onClick={onAddCardHandler}>Add</button>\r\n                    </th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {cards && cards.map(c => {\r\n                    return <Card key={c._id} card={c}/>\r\n                })}\r\n                </tbody>\r\n            </table>\r\n        </>);\r\n}\r\n\r\nexport default withRouter(Cards)","import React from \"react\";\r\nimport {Route, Switch} from \"react-router-dom\";\r\nimport Login from \"../../../n2-features/f1-auth/a1-login/Login\";\r\nimport Registration from \"../../../n2-features/f1-auth/a2-registration/Registration\";\r\nimport RecoveryPassword from \"../../../n2-features/f1-auth/a3-recovery-password/RecoveryPassword\";\r\nimport EnterNewPassword from \"../../../n2-features/f1-auth/a4-enter-new-password/EnterNewPassword\";\r\nimport Error from \"../../../n3-utils/u1-error/Error\";\r\nimport TestPage from \"../test-page/Tests\";\r\nimport Profile from \"../profile/Profile\";\r\nimport {Packs} from \"../packs/Packs\";\r\nimport Cards from \"../cards/Cards\";\r\n\r\nexport const PATH = {\r\n    PROFILE: \"/profile\",\r\n    LOGIN: \"/login\",\r\n    REGISTRATION: \"/registration\",\r\n    RECOVERY_PASSWORD: \"/recovery_password\",\r\n    ENTER_NEW_PASSWORD: \"/enter_new_password\",\r\n    TEST_PAGE: \"/test_page\",\r\n    PACKS: \"/packs\",\r\n    CARDS: \"/cards\",\r\n}\r\n\r\nconst Routes: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\r\n                <Route path={PATH.RECOVERY_PASSWORD} render={() => <RecoveryPassword/>}/>\r\n                <Route path={PATH.ENTER_NEW_PASSWORD} render={() => <EnterNewPassword/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={`${PATH.CARDS}/:cardsPack_id?`} render={() => <Cards/>}/>\r\n                <Route path={PATH.TEST_PAGE} render={() => <TestPage/>}/>\r\n                <Route render={() => <Error/>}/>\r\n            </Switch>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Routes;","import React from \"react\";\r\nimport style from \"./Header.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {PATH} from \"../routes/Routes\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\n\r\nconst Header: React.FC = () => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    return (\r\n        <div className={style.headerContainer}>\r\n            <nav className={style.navBlock}>\r\n                {!isLoggedIn ?\r\n                    <>\r\n                        <div>\r\n                            <NavLink to={PATH.LOGIN} activeClassName={style.active}>login</NavLink>\r\n                        </div>\r\n                        <div>\r\n                            <NavLink to={PATH.REGISTRATION} activeClassName={style.active}>Registration</NavLink>\r\n                        </div>\r\n                        <div>\r\n                            <NavLink to={PATH.RECOVERY_PASSWORD} activeClassName={style.active}>Recovery\r\n                                password</NavLink>\r\n                        </div>\r\n                        <div>\r\n                            <NavLink to={PATH.ENTER_NEW_PASSWORD} activeClassName={style.active}>Enter new\r\n                                password</NavLink>\r\n                        </div>\r\n                        <div>\r\n                            <NavLink to={PATH.TEST_PAGE} activeClassName={style.active}>Test page</NavLink>\r\n                        </div>\r\n                    </>\r\n                    : <>\r\n                        <div>\r\n                            <NavLink to={PATH.PROFILE} activeClassName={style.active}>Profile</NavLink>\r\n                        </div>\r\n                        <div>\r\n                            <NavLink to={PATH.PACKS} activeClassName={style.active}>Packs</NavLink>\r\n                        </div>\r\n                        <div>\r\n                            <NavLink to={PATH.CARDS} activeClassName={style.active}>Cards</NavLink>\r\n                        </div>\r\n                    </>\r\n                }\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport Header from './header/Header';\r\nimport Routes from \"./routes/Routes\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../m2-bll/store\";\r\nimport {initializedAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {Preloader} from \"./common/preloader/Preloader\";\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized);\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializedAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            {appStatus === \"loading\" && <Preloader/>}\r\n            <Routes/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Dispatch} from 'redux';\r\nimport {API} from '../../m3-dal/api';\r\nimport {setIsLoggedIn} from '../../../n2-features/f1-auth/a1-login/auth-reducer';\r\nimport {setAppStatusAC} from \"../app-reducer\";\r\n\r\ntype ActionsType = any\r\n\r\nconst initialState = {}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const profileReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//thunks\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {profileReducer} from '../m1-ui/profile/profile-reducer';\r\nimport {authReducer, AuthReducerActionType} from '../../n2-features/f1-auth/a1-login/auth-reducer';\r\nimport {registerReducer, RegisterReducerActionType} from '../../n2-features/f1-auth/a2-registration/register-reducer';\r\nimport thunk, {ThunkAction} from 'redux-thunk';\r\nimport {\r\n    recoveryReducer,\r\n    RecoveryReducerActionType\r\n} from '../../n2-features/f1-auth/a3-recovery-password/recovery-reducer';\r\nimport {appReducer, AppReducerActionType} from '../m1-ui/app-reducer';\r\nimport {filterReducer} from '../m1-ui/Search/filter-reducer';\r\nimport {\r\n    enterNewPasswordReducer,\r\n    EnterNewPasswordReducerActionType\r\n} from '../../n2-features/f1-auth/a4-enter-new-password/enterNewPassword-reducer';\r\nimport {packsReducer, PacksReducerActionType} from '../m1-ui/packs/packs-reducer';\r\nimport {cardsReducer, CardsReducerActionType} from '../m1-ui/cards/cards-reducer';\r\n\r\nconst reducer = combineReducers({\r\n    profile: profileReducer,\r\n    auth: authReducer,\r\n    register: registerReducer,\r\n    forgot: recoveryReducer,\r\n    app: appReducer,\r\n    filter: filterReducer,\r\n    newPassword: enterNewPasswordReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n\r\n})\r\n\r\nexport const store = createStore(reducer, applyMiddleware(thunk))\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducer>\r\n\r\ntype ActionsType = AppReducerActionType | AuthReducerActionType\r\n    | RegisterReducerActionType | RecoveryReducerActionType | EnterNewPasswordReducerActionType\r\n    | PacksReducerActionType | CardsReducerActionType\r\nexport type AppThunkType = ThunkAction<void, AppRootStateType, unknown, ActionsType>","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './n1-main/m1-ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./n1-main/m2-bll/store\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </HashRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}